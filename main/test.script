local gravity = -2200
local frame = 1.0 / 60.0
local velocity = vmath.vector3(400, 400, 0)

local vScale = 1 -- amount to scale velocity setting based on mouse position
local hScale = 1 -- amount to scale velocity setting based on mouse position
local iterations = 40 -- number of dots to make along projection line
local projectTime = 1 -- seconds into the future to project trajectory
local step = projectTime / iterations
local SCREEN_WIDTH = 1136
local SCREEN_HEIGHT = 640


local dotScale = vmath.vector3(1)
local lineColor = vmath.vector4(1, 1, 0, 1)


function init(self)
	msg.post(".", "acquire_input_focus")

	self.pos = go.get_position()
	self.dots = {}
	self.velocity = vmath.vector3(velocity)

	for i=1, iterations do
		table.insert(self.dots, spawn_dot(self, self.pos))
	end
	update_dots(self)
end


function on_input(self, action_id, action)

	-- Adjust to screen positioning
	-- action.x = action.x - (SCREEN_WIDTH * .5)
	-- action.y = action.y - (SCREEN_HEIGHT * .5)
	-- 
	if not action_id then
		--
		self.mouse_wpos = vmath.vector3(action.x, action.y, 0)
		if self.click_pressed then
			self.velocity = (self.mouse_wpos - self.pos)
			self.velocity.x = self.velocity.x * hScale
			self.velocity.y = self.velocity.y * vScale + math.abs(gravity * 0.5)
			update_dots(self)
		end
	end
	if action_id == hash("left click") then
		--
		if action.pressed then
			self.click_pressed = true
			self.mouse_wpos = vmath.vector3(action.x, action.y, 0)
			self.velocity = (self.mouse_wpos - self.pos)
			self.velocity.x = self.velocity.x * hScale
			self.velocity.y = self.velocity.y * vScale + math.abs(gravity * 0.5)

			update_dots(self)
		elseif action.released then
			self.click_pressed = false
		end
	elseif action_id == hash("right click") and action.pressed then

		velocity = vmath.vector3(self.velocity)
		self.animating = true		

	elseif action_id == hash("up") and action.released then

		self.animating = nil
		go.set_position(self.pos)

	end
end


function spawn_dot(self, pos)

	return factory.create("#dots", vmath.vector3(pos.x, pos.y, 0.1), nil, {}, dotScale)
end


function update_dots(self)
	for i, dot in ipairs(self.dots) do
		local t = i*step -- time to project into the future, for this dot
		local pos = vmath.vector3(self.pos)

		pos.x = pos.x + self.velocity.x * t -- x velocity is not affected by gravity
		pos.y = pos.y + self.velocity.y * t + .5 * gravity * t * t -- y = initalV*t + 1/2 G*t-squared
		pos.z = 0.1
		go.set_position(pos, dot)
	end
end


function fixed_update(self, dt)

	if self.animating then

		local pos = go.get_position()

		-- Adjust velocity.y with gravity
		velocity.y = velocity.y + (gravity * dt)		
		pos.x = pos.x + velocity.x * dt
		pos.y = pos.y + velocity.y * dt + 0.5 * gravity * dt * dt

		if pos.y < 0 then
			pos.y = 0
			velocity.y = velocity.y * -0.8
		end

		if pos.x > SCREEN_WIDTH then
			self.animating = nil
			go.set_position(self.pos)	
			return		
		end

		go.set_position(pos)
	end
end


function on_reload(self)

	self.animating = nil
	go.set_position(self.pos)
end